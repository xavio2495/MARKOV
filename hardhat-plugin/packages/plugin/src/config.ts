import { HardhatUserConfig } from "hardhat/config";
import { HardhatConfig } from "hardhat/types/config";
import { HardhatUserConfigValidationError } from "hardhat/types/hooks";

/**
 * This function validates the parts of the HardhatUserConfig that are relevant
 * to the plugin.
 *
 * This function is called from the `validateUserConfig` Hook Handler.
 *
 * @param userConfig The HardhatUserConfig, as exported in the config file.
 * @returns An array of validation errors, or an empty array if valid.
 */
export async function validatePluginConfig(
  userConfig: HardhatUserConfig,
): Promise<HardhatUserConfigValidationError[]> {
  if (userConfig.myConfig === undefined) {
    return [];
  }

  if (typeof userConfig.myConfig !== "object") {
    return [
      {
        path: ["myConfig"],
        message: "Expected an object with an optional greeting.",
      },
    ];
  }

  const greeting = userConfig.myConfig?.greeting;
  if (greeting === undefined) {
    return [];
  }

  if (typeof greeting !== "string" || greeting.length === 0) {
    return [
      {
        path: ["myConfig", "greeting"],
        message: "Expected a non-empty string.",
      },
    ];
  }

  return [];
}

/**
 * Resolves the plugin config, based on an already validated HardhatUserConfig
 * and a partially resolved HardhatConfig.
 *
 * This function is called from the `resolveUserConfig` Hook Handler.
 *
 * @param userConfig The HardhatUserConfig.
 * @param partiallyResolvedConfig The partially resolved HardhatConfig, which is
 *  generated by calling `next` in the `resolveUserConfig` Hook Handler.
 * @returns The resolved HardhatConfig.
 */
export async function resolvePluginConfig(
  userConfig: HardhatUserConfig,
  partiallyResolvedConfig: HardhatConfig,
): Promise<HardhatConfig> {
  const greeting = userConfig.myConfig?.greeting ?? "Hello";
  const myConfig = { greeting };

  return {
    ...partiallyResolvedConfig,
    myConfig,
  };
}
