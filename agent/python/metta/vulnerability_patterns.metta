;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Markov Audit System - Vulnerability Patterns
;;; Version: 2.0.0
;;; Updated: 2025-10-26 06:03:41 UTC
;;; Developer: charlesms-eth
;;; License: MIT (FREE OPEN SOURCE)
;;;
;;; Solidity-specific vulnerability patterns and detection logic
;;; Total: ~300 lines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; ============================================================
;;; REENTRANCY PATTERNS
;;; ============================================================

;;; Classic reentrancy pattern
(= (pattern-reentrancy-classic $code)
   (and (matches $code ".call{value:")
        (matches-after $code "balances\\[.*\\]\\s*-=")
        (not (has-modifier $code "nonReentrant"))))

;;; Cross-function reentrancy
(= (pattern-reentrancy-cross-function $contract)
   (and (has-shared-state $contract)
        (multiple-external-calls $contract)
        (state-modified-between-calls $contract)))

;;; Read-only reentrancy
(= (pattern-reentrancy-read-only $contract)
   (and (has-view-function-with-state-read $contract)
        (called-during-state-transition $contract)))

;;; ============================================================
;;; ACCESS CONTROL PATTERNS
;;; ============================================================

;;; Missing modifier pattern
(= (pattern-missing-modifier $function)
   (and (matches $function "function\\s+(withdraw|transferOwnership|pause)")
        (not (matches $function "onlyOwner|onlyAdmin|onlyRole"))))

;;; tx.origin authentication (dangerous)
(= (pattern-tx-origin-auth $code)
   (and (matches $code "tx\\.origin")
        (matches $code "require|if")
        (in-authorization-context $code)))

;;; Unprotected initialize
(= (pattern-unprotected-initialize $function)
   (and (matches $function "function\\s+initialize")
        (not (matches $function "initializer"))
        (not (has-initialized-check $function))))

;;; Weak randomness in access
(= (pattern-weak-randomness $code)
   (and (uses-for-authorization $code)
        (or (matches $code "block\\.timestamp")
            (matches $code "block\\.number")
            (matches $code "blockhash"))))

;;; ============================================================
;;; INTEGER OVERFLOW PATTERNS
;;; ============================================================

;;; Unchecked arithmetic (pre-0.8.0)
(= (pattern-unchecked-arithmetic $code)
   (and (solidity-version-below "0.8.0" $code)
        (not (matches $code "SafeMath"))
        (matches $code "[+\\-*/]\\s*=")))

;;; Unsafe cast
(= (pattern-unsafe-cast $code)
   (matches $code "uint\\d+\\(.*uint256.*\\)"))

;;; Division before multiplication
(= (pattern-precision-loss $code)
   (matches $code "\\w+\\s*/\\s*\\w+\\s*\\*\\s*\\w+"))

;;; Unhandled return value (arithmetic)
(= (pattern-unhandled-arithmetic-return $code)
   (and (matches $code "\\.add\\(|\\.sub\\(|\\.mul\\(|\\.div\\(")
        (not (assigns-result $code))
        (not (uses-in-require $code))))

;;; ============================================================
;;; EXTERNAL CALL PATTERNS
;;; ============================================================

;;; Unchecked low-level call
(= (pattern-unchecked-call $code)
   (and (matches $code "\\.call\\(|\\.call\\{")
        (not (matches $code "\\(bool\\s+\\w+"))
        (not (matches-within-lines $code "require" 2))))

;;; Unchecked send/transfer
(= (pattern-unchecked-send $code)
   (and (matches $code "\\.send\\(")
        (not (matches $code "require|if"))))

;;; Unsafe delegatecall
(= (pattern-unsafe-delegatecall $code)
   (and (matches $code "\\.delegatecall\\(")
        (or (matches $code "msg\\.sender")
            (matches $code "_to\\b|_target\\b|_address\\b")
            (not (has-address-whitelist $code)))))

;;; Call with value without checks
(= (pattern-call-value-unchecked $code)
   (and (matches $code "\\.call\\{value:")
        (not (checks-call-success $code))))

;;; ============================================================
;;; GAS LIMIT AND DOS PATTERNS
;;; ============================================================

;;; Unbounded loop
(= (pattern-unbounded-loop $code)
   (and (matches $code "for\\s*\\(.*\\.length")
        (not (has-max-iterations $code))
        (has-expensive-operation $code)))

;;; Gas limit reliance
(= (pattern-gas-limit-dos $code)
   (and (processes-dynamic-array $code)
        (in-single-transaction $code)
        (no-pagination $code)))

;;; Block gas limit
(= (pattern-block-gas-limit $code)
   (and (matches $code "while.*true")
        (not (has-break-condition $code))))

;;; ============================================================
;;; FRONT-RUNNING PATTERNS
;;; ============================================================

;;; Transaction ordering dependence
(= (pattern-transaction-ordering $function)
   (and (is-state-changing $function)
        (price-dependent $function)
        (not (has-commit-reveal $function))))

;;; MEV vulnerability
(= (pattern-mev-vulnerable $function)
   (and (is-swap-function $function)
        (not (has-slippage-protection $function))
        (not (has-deadline $function))))

;;; Unprotected approval
(= (pattern-unprotected-approval $code)
   (and (matches $code "approve\\(")
        (not (checks-allowance-first $code))))

;;; ============================================================
;;; TIMESTAMP DEPENDENCE PATTERNS
;;; ============================================================

;;; Dangerous timestamp usage
(= (pattern-timestamp-manipulation $code)
   (and (matches $code "block\\.timestamp|now")
        (or (in-random-generation $code)
            (in-deadline-check $code)
            (in-critical-state-transition $code))
        (small-time-window $code)))

;;; Block number dependence
(= (pattern-block-number-dependence $code)
   (and (matches $code "block\\.number")
        (affects-critical-logic $code)))

;;; ============================================================
;;; LOGIC ERROR PATTERNS
;;; ============================================================

;;; Off-by-one errors
(= (pattern-off-by-one $code)
   (or (matches $code "<=.*\\.length")
       (matches $code "<\\s*\\w+\\.length\\s*-\\s*1")))

;;; Incorrect comparison
(= (pattern-incorrect-comparison $code)
   (matches $code "=\\s*[^=]"))  ; Single = in condition

;;; Missing return statement
(= (pattern-missing-return $function)
   (and (has-return-type $function)
        (not (all-paths-return $function))))

;;; Shadowing state variables
(= (pattern-variable-shadowing $code)
   (and (declares-local-variable $code)
        (same-name-as-state-variable $code)))

;;; ============================================================
;;; UPGRADABILITY PATTERNS
;;; ============================================================

;;; Uninitialized proxy
(= (pattern-uninitialized-proxy $contract)
   (and (is-proxy-pattern $contract)
        (not (has-constructor-disable $contract))
        (not (has-initializer $contract))))

;;; Storage collision
(= (pattern-storage-collision $contract)
   (and (is-upgradeable $contract)
        (storage-layout-changed $contract)))

;;; Selfdestruct in logic contract
(= (pattern-selfdestruct-in-logic $contract)
   (and (is-logic-contract $contract)
        (matches $contract "selfdestruct")))

;;; ============================================================
;;; TOKEN-SPECIFIC PATTERNS
;;; ============================================================

;;; Missing transfer return check
(= (pattern-missing-transfer-check $code)
   (and (matches $code "\\.transfer\\(|\\.transferFrom\\(")
        (not (checks-return-value $code))))

;;; Approval race condition
(= (pattern-approval-race $code)
   (and (matches $code "function\\s+approve")
        (not (checks-current-allowance $code))))

;;; Unlimited approval
(= (pattern-unlimited-approval $code)
   (and (matches $code "approve.*type\\(uint256\\)\\.max")
        (not (has-warning-or-check $code))))

;;; ============================================================
;;; ORACLE PATTERNS
;;; ============================================================

;;; Missing price validation
(= (pattern-missing-price-validation $code)
   (and (gets-oracle-price $code)
        (not (validates-price-bounds $code))
        (not (checks-price-freshness $code))))

;;; Single oracle dependence
(= (pattern-single-oracle $contract)
   (and (uses-price-oracle $contract)
        (not (has-fallback-oracle $contract))))

;;; Stale price usage
(= (pattern-stale-price $code)
   (and (matches $code "latestRoundData|latestAnswer")
        (not (checks-timestamp $code))))

;;; ============================================================
;;; SIGNATURE PATTERNS
;;; ============================================================

;;; Signature replay
(= (pattern-signature-replay $code)
   (and (verifies-signature $code)
        (not (uses-nonce $code))
        (not (uses-deadline $code))))

;;; Missing signature validation
(= (pattern-missing-sig-validation $code)
   (and (uses-signature $code)
        (not (validates-signer $code))))

;;; Malleable signatures
(= (pattern-malleable-signature $code)
   (and (uses-ecrecover $code)
        (not (checks-s-value $code))))

;;; ============================================================
;;; DEFI-SPECIFIC PATTERNS
;;; ============================================================

;;; Flash loan attack vector
(= (pattern-flash-loan-vulnerable $function)
   (and (uses-spot-price $function)
        (not (uses-twap $function))
        (affects-critical-calculation $function)))

;;; Sandwich attack vector
(= (pattern-sandwich-vulnerable $function)
   (and (is-swap-function $function)
        (not (has-slippage-check $function))))

;;; Price manipulation
(= (pattern-price-manipulation $contract)
   (and (calculates-price-from-reserves $contract)
        (not (uses-time-weighted-average $contract))))

;;; Liquidity drain
(= (pattern-liquidity-drain $function)
   (and (is-liquidity-function $function)
        (missing-access-control $function)))

;;; ============================================================
;;; NFT-SPECIFIC PATTERNS
;;; ============================================================

;;; Missing ownership check
(= (pattern-missing-ownership-check $function)
   (and (transfers-nft $function)
        (not (checks-owner-or-approved $function))))

;;; Metadata manipulation
(= (pattern-metadata-manipulation $contract)
   (and (stores-metadata-onchain $contract)
        (metadata-mutable $contract)
        (not (has-access-control-on-metadata $contract))))

;;; Royalty bypass
(= (pattern-royalty-bypass $contract)
   (and (implements-royalty $contract)
        (has-direct-transfer $contract)))

;;; ============================================================
;;; ASSEMBLY PATTERNS
;;; ============================================================

;;; Unsafe assembly usage
(= (pattern-unsafe-assembly $code)
   (and (matches $code "assembly")
        (or (uses-delegatecall-in-assembly $code)
            (manipulates-storage-directly $code)
            (no-safety-checks $code))))

;;; Memory manipulation
(= (pattern-unsafe-memory $code)
   (and (matches $code "mstore|mload")
        (not (in-safe-context $code))))

;;; ============================================================
;;; VISIBILITY PATTERNS
;;; ============================================================

;;; Default visibility
(= (pattern-default-visibility $function)
   (and (is-function $function)
        (not (has-visibility-specifier $function))))

;;; Public function that should be external
(= (pattern-should-be-external $function)
   (and (is-public-function $function)
        (not (called-internally $function))
        (not (uses-this $function))))

;;; ============================================================
;;; STATE VARIABLE PATTERNS
;;; ============================================================

;;; Uninitialized state variable
(= (pattern-uninitialized-state $variable)
   (and (is-state-variable $variable)
        (not (initialized-in-declaration $variable))
        (not (initialized-in-constructor $variable))
        (is-reference-type $variable)))

;;; Public mapping
(= (pattern-public-mapping-array $variable)
   (and (is-mapping-or-array $variable)
        (is-public $variable)
        (contains-sensitive-data $variable)))

;;; ============================================================
;;; EVENT PATTERNS
;;; ============================================================

;;; Missing event emission
(= (pattern-missing-event $function)
   (and (is-critical-state-change $function)
        (not (emits-event $function))))

;;; Incorrect event parameters
(= (pattern-incorrect-event-params $event)
   (and (is-event $event)
        (not (all-params-indexed-appropriately $event))))

;;; ============================================================
;;; DEPENDENCY PATTERNS
;;; ============================================================

;;; Outdated dependency
(= (pattern-outdated-dependency $import)
   (and (is-external-import $import)
        (version-has-known-vulnerabilities $import)))

;;; Unpinned dependency version
(= (pattern-unpinned-version $import)
   (and (is-npm-import $import)
        (uses-caret-or-tilde $import)))

;;; ============================================================
;;; PATTERN MATCHING HELPERS
;;; ============================================================

;;; Check if code matches regex pattern
(= (matches $code $pattern)
   (regex-match $pattern $code))

;;; Check if pattern appears after another
(= (matches-after $code $pattern-after)
   (and (matches $code $pattern-after)
        (pattern-appears-later $code $pattern-after)))

;;; Check pattern within N lines
(= (matches-within-lines $code $pattern $n)
   (pattern-within-distance $code $pattern $n))

;;; ============================================================
;;; SEVERITY ASSIGNMENT BY PATTERN
;;; ============================================================

;;; Assign severity to detected pattern
(= (pattern-severity pattern-reentrancy-classic) critical)
(= (pattern-severity pattern-unsafe-delegatecall) critical)
(= (pattern-severity pattern-missing-modifier) high)
(= (pattern-severity pattern-tx-origin-auth) high)
(= (pattern-severity pattern-unchecked-arithmetic) high)
(= (pattern-severity pattern-unchecked-call) medium)
(= (pattern-severity pattern-precision-loss) medium)
(= (pattern-severity pattern-timestamp-manipulation) medium)
(= (pattern-severity pattern-unbounded-loop) medium)
(= (pattern-severity pattern-missing-event) low)
(= (pattern-severity pattern-should-be-external) low)

;;; ============================================================
;;; END OF VULNERABILITY PATTERNS
;;; ============================================================

;;; Total lines: ~300
;;; Patterns cover:
;;; - Reentrancy (classic, cross-function, read-only)
;;; - Access control (missing modifiers, tx.origin, etc.)
;;; - Integer overflow/underflow
;;; - External call safety
;;; - Gas limits and DoS
;;; - Front-running and MEV
;;; - Timestamp dependence
;;; - Logic errors
;;; - Upgradability issues
;;; - Token-specific vulnerabilities
;;; - Oracle manipulation
;;; - Signature vulnerabilities
;;; - DeFi-specific patterns
;;; - NFT-specific patterns
;;; - Assembly safety
;;; - Visibility issues
;;; - State variable initialization
;;; - Event emission
;;; - Dependency management